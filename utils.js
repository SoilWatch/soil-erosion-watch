// ****************************************************************************************************************** //
// ********************************* Utility Functions for the Soil Erosion GEE App ********************************* //
// ****************************************************************************************************************** //

// Function to calculate NDVI as Int16()
exports.addNDVI = function(img){
  var ndvi = img.normalizedDifference(['B8', 'B4'])
  .multiply(10000) // Multiply the NDVI by 10000 to rescale the range from [0,1] to [0, 10000]
  .toInt16() // and convert to Int16 to align with Sentinel-2 bands data type
  .rename('NDVI');

  return img.addBands(ndvi)
};


// Function to add a Day of Year band to an image collection
exports.addDOY = function(from_date){
    var wrap = function(img){
        var doy = ee.Number(img.date().difference(from_date, 'day'));
        var constant = ee.Image(doy).rename('doy').int();

        return img.addBands(constant)
    };

    return wrap
};


// Define a function to generate a download URL of the image for the
// viewport region.
exports.downloadImg = function(img, geom, subcounties_name){
  img = ee.Image(img[0]);
  var downloadArgs = {
    name: 'ee_png',
    //crs: 'EPSG:4326',
    format: 'jpeg',
    min: 0,
    max: 100,
    dimensions: 1000,
    //scale: 250,
    region: geom.geometry()
    };
  var url = img.getThumbURL(downloadArgs);
  urlLabel.setUrl(url);
  urlLabel.style().set({shown: true});
  DownloadPanel = ui.Panel([urlLabel], ui.Panel.Layout.flow('vertical'));

  return DownloadPanel
};


// Attempts to create soil clusters from the bare soil synthetic composites generated by GEOS3
// TODO: Not introduced in workflow because too slow,
// TODO: and cannot meaningfully associate clusters to soil classes without contextual knowledge
exports.clusterSoilClasses = function(img, band_list, geom){
  var training = img.select(band_list).sample({
      numPixels: 5000,
      scale: 10,
      region: geom
      //tileScale: 16
    });

  // Instantiate the clusterer and train it.
  var clusterer = ee.Clusterer.wekaCascadeKMeans(4, 4).train(training);

  // Cluster the input using the trained clusterer.
  var result = img.cluster(clusterer);

  result = result.expression('PRED + 1', {'PRED': result.select('cluster')}).toByte();

  // Print out the frequency of landcover occurrence for each county
  var frequency = result.reduceRegion({
    geometry: geom,
    scale: 100,
    reducer: ee.Reducer.frequencyHistogram(),
    bestEffort: true
  });

  var key_list = ee.Dictionary(frequency.get('cluster')).keys();

  // Pre-define some customization options.
  var options = {
      title: 'soil type clustering',
      fontSize: 20,
      hAxis: {title: 'B8'},
      vAxis: {title: 'hectares'},
      series: {
        0: {color: 'green'},
        1: {color: 'orange'},
        2: {color: 'brown'},
        3: {color: 'black'},
        4: {color: 'pink'}
      }
    };

  var histo_image = key_list.iterate(function(key, previous){
    previous = ee.Image(previous);
    var temp_img = previous.updateMask(result.eq(ee.Number.parse(key))).select('B8').rename(ee.String(key));
    return previous.addBands(temp_img);
  }, image);

  // Make the histogram, set the options.
  var cluster_histogram = ui.Chart.image.histogram({
    image: ee.Image(histo_image).select(key_list),
    region: geom,
    scale: 100,
    maxPixels: 10e10
  })
  .setSeriesNames(key_list)
  .setOptions(options);

  return [result, frequency, cluster_histogram]
};
